section .text
global _start
global is_mnemonic

_start:
	mov  eax, string
	mov  ebx, return
	push ebx
	push eax
	call is_mnemonic
	pop  eax
	pop  ebx
	
; debugging ------------------------------------------------
        mov  eax, DWORD[return]
        cmp  eax, 0
        je   _FALSE_PRINT
        cmp  eax, 1
        je   _TRUE_PRINT
_FALSE_PRINT:
	mov  ecx, FALSE
	mov  edx, 5
	mov  ebx, 1
	mov  eax, 4
	int  0x80 
	jmp  _print_done
	
_TRUE_PRINT:
	mov  ecx, _TRUE
	mov  edx, 5
	mov  ebx, 1
	mov  eax, 4
	int  0x80
	
_print_done:
	mov  eax, 1
	int  0x80
; ----------------------------------------------------------- 
   
   
is_mnemonic: ;void is_mnemonic(char* string, uint32* return)
	push ebp
	mov  ebp, esp
	xor  ecx, ecx
	xor  ebx, ebx
	mov  eax, DWORD[ebp+0x8] ; eax contains the address of the string
	mov  edx, global_mnemonics_table
	mov  esi, DWORD[global_mnemonics_table_counter] ; esi keeps the counter
_is_mnemonic_next_entry:
    xor  ecx, ecx ; ecx is strlen(global_mnemonics_table[i])
	xor  ebx, ebx
	push edx
_is_mnemonic_start_length:
	mov  bl, BYTE[edx]
	cmp  bl, 0x00
	je   _is_mnemonic_length_done
	add  ecx, 1
	add  edx, 1
	jmp  _is_mnemonic_start_length
_is_mnemonic_length_done:
    pop  edx
	xor  ebx, ebx
	push edx
	push ecx
	push eax
_is_mnemonic_compare:
    cmp  ecx, 0
    je   _is_mnemonic_found_entry
	mov  bl, BYTE[edx]
	mov  bh, BYTE[eax]
	sub  ecx, 1
	cmp  bh, bl
	jne  _is_mnemonic_not_equal
	add  edx, 1
	add  eax, 1
	jmp  _is_mnemonic_compare
_is_mnemonic_not_equal:
    pop  eax
    pop  ecx
    pop  edx
    add  edx, ecx
    add  edx, 1 ; very very important to jump over 0x00 character
    sub  esi, 1
    cmp  esi, 0
    je   _is_mnemonic_sure_false
    jmp  _is_mnemonic_next_entry
_is_mnemonic_found_entry:	
	pop  eax
    pop  ecx
    pop  edx
	mov  ebx, DWORD[ebp+0xc] ; ebx contains the address of the return
	mov  DWORD[ebx], 1
	jmp  _is_mnemonic_end
_is_mnemonic_sure_false:
    mov  ebx, DWORD[ebp+0xc] ; ebx contains the address of the return
	mov  DWORD[ebx], 0
_is_mnemonic_end:
	mov  esp, ebp
	pop  ebp
	ret
section .data
	string: db 'int', 0
	global_mnemonics_table: db 'mov', 0, 'add', 0, 'sub', 0, 'push', 0 
	; in LiBOS this address is ISBA_GLOB_MN_ADDR at (0x0DCD,BA14) with  maximum size 512 bytes
	
	global_mnemonics_table_counter: dd 4 
	; in LiBOS this address is ISBA_GLOB_MN_CNT (0x0DC9,B004)
	
	return: dd 0xFFFFFFFF
	_TRUE: db '_true', 0
	FALSE:  db 'false', 0
	
	bytes ~> (global_mnemonics_table is ISBA_GLOB_MN_ADDR at (0x0DCD,BA14) with  maximum size 512 bytes
	and global_mnemonics_table_counter is ISBA_GLOB_MN_CNT (0x0DC9,B004))
	{ 
		0x55, 0x89, 0xE5, 0x8B, 0x45, 0x08, 0xBA, 0x14, 0xBA, 0xCD, 0x0D, 0x8B, 0x35, 0x04, 0xB0, 0xC9, 
		0x0D, 0x31, 0xC9, 0x31, 0xDB, 0x52, 0x8A, 0x1A, 0x80, 0xFB, 0x00, 0x74, 0x08, 0x83, 0xC1, 0x01, 
		0x83, 0xC2, 0x01, 0xEB, 0xF1, 0x5A, 0x31, 0xDB, 0x52, 0x51, 0x50, 0x83, 0xF9, 0x00, 0x74, 0x25, 
		0x8A, 0x1A, 0x8A, 0x38, 0x83, 0xE9, 0x01, 0x38, 0xDF, 0x75, 0x08, 0x83, 0xC2, 0x01, 0x83, 0xC0, 
		0x01, 0xEB, 0xE8, 0x58, 0x59, 0x5A, 0x01, 0xCA, 0x83, 0xC2, 0x01, 0x83, 0xEE, 0x01, 0x83, 0xFE, 
		0x00, 0x74, 0x10, 0xEB, 0xBC, 0x58, 0x59, 0x5A, 0x8B, 0x5D, 0x0C, 0xC7, 0x03, 0x01, 0x00, 0x00, 
		0x00, 0xEB, 0x09, 0x8B, 0x5D, 0x0C, 0xC7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x89, 0xEC, 0x5D, 0xC3 
	}
