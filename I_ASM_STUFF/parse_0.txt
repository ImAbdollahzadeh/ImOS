section .text

global _start
global parse_0
_start:
    mov eax, TPs
    mov ecx, DWORD[_line]
    push ecx
    push eax
    call init
    pop eax
    pop ecx

    mov eax, TPs
    mov ebx, _file
    mov ecx, DWORD[_line]
    push ecx
    push eax
    push ebx
    call parse_0
    pop ebx
    pop eax
    pop ecx
    
    mov eax, TPs
    mov ecx, DWORD[_line]
    push ecx
    push eax
    call print_mods
    pop eax
    pop ecx
    
    mov eax, TPs
    mov ecx, DWORD[_line]
    push ecx
    push eax
    call print_instructions
    pop eax
    pop ecx
    
    
    mov eax, 1
    int 0x80
    
    
print_mods:
    push ebp
    mov ebp, esp
    mov eax, DWORD[ebp+8]
    mov ecx, DWORD[ebp+12]
    push ecx
    mov edx, 0
    
print_mods_follow_printing:
    push edx
    mov ebx, edx
    imul ebx, 0x183
    add ebx, eax
    add ebx, 0x180
    mov ecx, ebx
    mov edx, 3
    mov ebx, 1
    push eax
    mov eax, 4
    int 0x80
    mov ecx, _ENTER
    mov edx, 1
    mov ebx, 1
    mov eax, 4
    int 0x80
    pop eax
    pop edx
    add edx, 1
    pop ecx
    push ecx
    cmp edx, ecx
    jne print_mods_follow_printing
    pop ecx
    mov esp, ebp
    pop ebp
    ret
    
print_instructions:
    push ebp
    mov ebp, esp
    mov ecx, DWORD[ebp+12]
    mov edx, 0
    
print_instructions_follow_printing:
    push edx
    imul edx, 0x183
    add edx, DWORD[ebp+8]
    mov ecx, edx
    push ecx
    mov edx, 20
    mov ebx, 1
    mov eax, 4
    int 0x80
    mov ecx, _ENTER
    mov edx, 1
    mov ebx, 1
    mov eax, 4
    int 0x80
    pop ecx
    add ecx, 0x80
    push ecx
    mov ebx, 1
    mov edx, 20
    mov eax, 4
    int 0x80
    mov ecx, _ENTER
    mov edx, 1
    mov ebx, 1
    mov eax, 4
    int 0x80
    pop ecx
    add ecx, 0x80
    push ecx
    mov ebx, 1
    mov edx, 20
    mov eax, 4
    int 0x80
    mov ecx, _ENTER
    mov edx, 1
    mov ebx, 1
    mov eax, 4
    int 0x80
    pop ecx
    pop edx
    add edx, 1
    mov ecx, DWORD[_line]
    cmp edx, ecx
    jne print_instructions_follow_printing
    mov esp, ebp
    pop ebp
    ret
    
init:
    push ebp
    mov ebp, esp
    mov eax, DWORD[ebp+8]
    mov ecx, DWORD[ebp+12]
_init_X:
    add eax, 0x180
    mov BYTE[eax], 0x21
    add eax, 1
    mov BYTE[eax], 0x21
    add eax, 1
    mov BYTE[eax], 0x21
    add eax, 1
    sub ecx, 1
    cmp ecx, 0
    jne _init_X
    mov esp, ebp
    pop ebp
    ret
    
parse_0:
	push ebp
	mov ebp, esp
	mov eax, DWORD[ebp+0x08]  
	mov edx, DWORD[ebp+0x0C]
	mov ecx, DWORD[ebp+0x10]
	xor ebx, ebx
	mov edi, 0x0DCDB96C
	cmp ecx, 0x0
	je _end
_X:    
	mov bl, BYTE[eax]
	cmp bl, 0x0A
	je _lex
	mov BYTE[edi], bl
	add edi, 0x1
	add eax, 0x1
	jmp _X
_lex:
	xor ebx, ebx
	mov BYTE[edi], 0x00
	mov edi, 0x0DCDB96C
	mov esi, 0x0DCDB9EC
_Y:
	mov bl, BYTE[edi]
	cmp bl, 0x2D
	je increment
	cmp bl, 0x2C
	je increment
	cmp bl, 0x3B
	je comment
	cmp bl, 0x5B
	je directives
_normal_character:
	cmp bl, 0x20
	je __STUB
	cmp bl, 0x00
	je __STUB
	mov BYTE[esi], bl
	add esi, 0x1
	add edi, 0x1
	jmp _Y
__STUB:
	mov BYTE[esi], 0x00
	push ebx
	push edx 
	add edx, 0x180
	mov bl, BYTE[edx]
	cmp bl, 0x21
	je _first_tp_mod
	add edx, 0x1
	mov bl, BYTE[edx]
	cmp bl, 0x21
	je _second_tp_mod
	add edx, 0x1
	mov bl, BYTE[edx]
	cmp bl, 0x21
	je _third_tp_mod
_first_tp_mod:
    mov BYTE[edx], 0x2E 
	pop edx
	push edx
	mov esi, 0x0DCDB9EC
	jmp __Z
_second_tp_mod:
    mov BYTE[edx], 0x2E 
	pop edx
	push edx
	add edx, 0x80
	mov esi, 0x0DCDB9EC
	jmp __Z
_third_tp_mod:
	mov BYTE[edx], 0x2E 
	pop edx
	push edx
	add edx, 0x100
	mov esi, 0x0DCDB9EC
	jmp __Z
__Z:
	xor ebx, ebx
	mov bl, BYTE[esi]
	cmp bl, 0x0
	je _terminate_character
	mov BYTE[edx], bl
	add esi, 0x1
	add edx, 0x1
	jmp __Z
_terminate_character:
	mov BYTE[edx], 0x0
	add edi, 0x1
	mov esi, 0x0DCDB9EC
	pop edx
	pop ebx
	cmp bl, 0x00
	je  comment
	jmp _Y
increment:
	add edi, 0x1
	jmp _Y
directives:
	cmp edi, 0x0DCDB96C
	jne _normal_character
	mov BYTE[esi], 0x5B
	add esi, 0x1
directives_2:
	add edi, 0x1
	mov bl, BYTE[edi]
	cmp bl, 0x5D
	je end_of_directives
	mov BYTE[esi], bl
	add esi, 0x1
	jmp directives_2
end_of_directives:
	mov BYTE[esi], 0x5D
	add esi, 0x1
	xor ebx, ebx
	jmp __STUB
comment:
	add edx, 0x183
	sub ecx, 0x1
	cmp ecx, 0x0
	je _end    
	add eax, 0x1
	mov edi, 0x0DCDB96C
	xor ebx, ebx
	jmp _X    
_end:
	mov esp, ebp
	pop ebp
	ret


section .data
    _file: db 'mov eax, 0x10101010',0x0A,'mov esp, DWORD[0x10]',0x0A,'[ORIG 0x23]',0x0A,'sub BYTE[eax], dl', 0x0A, '[I_ASM.32-bit]', 0x0A, 'int 0x16', 0x0A,0
    _line: dd 6
    _ENTER: db 0x0a
    which_tp_mod: dd 0
section .bss
    TPs resb 400000
    p   resb 0x80
    pp  resb 0x80
	
	
	
	
	
	bytes ~>
	{ 
		0x55, 0x89, 0xE5, 0x8B, 0x45, 0x08, 0x8B, 0x55, 0x0C, 0x8B, 0x4D, 0x10, 0x31, 0xDB, 0xBF, 0x6C, 
		0xB9, 0xCD, 0x0D, 0x83, 0xF9, 0x00, 0x0F, 0x84, 0x2F, 0x01, 0x00, 0x00, 0x8A, 0x18, 0x80, 0xFB, 
		0x0A, 0x74, 0x0A, 0x88, 0x1F, 0x83, 0xC7, 0x01, 0x83, 0xC0, 0x01, 0xEB, 0xEF, 0x31, 0xDB, 0xC6, 
		0x07, 0x00, 0xBF, 0x6C, 0xB9, 0xCD, 0x0D, 0xBE, 0xEC, 0xB9, 0xCD, 0x0D, 0x8A, 0x1F, 0x80, 0xFB, 
		0x2D, 0x0F, 0x84, 0xAF, 0x00, 0x00, 0x00, 0x80, 0xFB, 0x2C, 0x0F, 0x84, 0xA6, 0x00, 0x00, 0x00, 
		0x80, 0xFB, 0x3B, 0x0F, 0x84, 0xD5, 0x00, 0x00, 0x00, 0x80, 0xFB, 0x5B, 0x0F, 0x84, 0x9C, 0x00, 
		0x00, 0x00, 0x80, 0xFB, 0x20, 0x74, 0x0F, 0x80, 0xFB, 0x00, 0x74, 0x0A, 0x88, 0x1E, 0x83, 0xC6, 
		0x01, 0x83, 0xC7, 0x01, 0xEB, 0xC6, 0xC6, 0x06, 0x00, 0x53, 0x52, 0x81, 0xC2, 0x80, 0x01, 0x00, 
		0x00, 0x8A, 0x1A, 0x80, 0xFB, 0x21, 0x74, 0x14, 0x83, 0xC2, 0x01, 0x8A, 0x1A, 0x80, 0xFB, 0x21, 
		0x74, 0x16, 0x83, 0xC2, 0x01, 0x8A, 0x1A, 0x80, 0xFB, 0x21, 0x74, 0x1E, 0xC6, 0x02, 0x2E, 0x5A, 
		0x52, 0xBE, 0xEC, 0xB9, 0xCD, 0x0D, 0xEB, 0x24, 0xC6, 0x02, 0x2E, 0x5A, 0x52, 0x81, 0xC2, 0x80, 
		0x00, 0x00, 0x00, 0xBE, 0xEC, 0xB9, 0xCD, 0x0D, 0xEB, 0x12, 0xC6, 0x02, 0x2E, 0x5A, 0x52, 0x81, 
		0xC2, 0x00, 0x01, 0x00, 0x00, 0xBE, 0xEC, 0xB9, 0xCD, 0x0D, 0xEB, 0x00, 0x31, 0xDB, 0x8A, 0x1E, 
		0x80, 0xFB, 0x00, 0x74, 0x0A, 0x88, 0x1A, 0x83, 0xC6, 0x01, 0x83, 0xC2, 0x01, 0xEB, 0xED, 0xC6, 
		0x02, 0x00, 0x83, 0xC7, 0x01, 0xBE, 0xEC, 0xB9, 0xCD, 0x0D, 0x5A, 0x5B, 0x80, 0xFB, 0x00, 0x74, 
		0x3D, 0xE9, 0x46, 0xFF, 0xFF, 0xFF, 0x83, 0xC7, 0x01, 0xE9, 0x3E, 0xFF, 0xFF, 0xFF, 0x81, 0xFF, 
		0x6C, 0xB9, 0xCD, 0x0D, 0x0F, 0x85, 0x58, 0xFF, 0xFF, 0xFF, 0xC6, 0x06, 0x5B, 0x83, 0xC6, 0x01, 
		0x83, 0xC7, 0x01, 0x8A, 0x1F, 0x80, 0xFB, 0x5D, 0x74, 0x07, 0x88, 0x1E, 0x83, 0xC6, 0x01, 0xEB, 
		0xEF, 0xC6, 0x06, 0x5D, 0x83, 0xC6, 0x01, 0x31, 0xDB, 0xE9, 0x48, 0xFF, 0xFF, 0xFF, 0x81, 0xC2, 
		0x83, 0x01, 0x00, 0x00, 0x83, 0xE9, 0x01, 0x83, 0xF9, 0x00, 0x74, 0x0F, 0x83, 0xC0, 0x01, 0xBF, 
		0x6C, 0xB9, 0xCD, 0x0D, 0x31, 0xDB, 0xE9, 0xD1, 0xFE, 0xFF, 0xFF, 0x89, 0xEC, 0x5D, 0xC3 
	}