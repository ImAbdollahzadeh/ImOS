section .text
global _start
global hex2str_@_32_bit

_start:
	mov  edi, num
	mov  eax, DWORD[edi]
	mov  ebx, string
	push ebx
	push eax
	call hex2str
	pop  eax
	pop  ebx
	
; debugging ------------------------------------------------
	mov  ecx, string
	mov  edx, 8
	mov  ebx, 1
	mov  eax, 4
	int  0x80 
	
	mov  eax, 1
	int  0x80
; ----------------------------------------------------------- 
   
   
hex2str_@_32_bit: ;void hex2str_@_32_bit(UINT_32 num, char* string)
	push ebp
	mov  ebp, esp
	mov  eax, DWORD[ebp+0x08] ; eax contains the hex number
	mov  ebx, DWORD[ebp+0x0c] ; ebx contains the address of the string
	mov  ecx, 0
	mov  esi, lookup_hex_table
	push ebx
_loop:
	cmp  ecx, 8
	je   _done
	xor  edx, edx
	mov  ebx, 0x10
	div  ebx
	add  ecx, 1
	
	; now edx contains a number between 0 and 15 
	; that should be found in lookup_table
	
	add  edx, esi
	
	; now edx points to the rigt byte
	
	pop  ebx
	push ebx
	mov  edi, 8
	sub  edi, ecx
	add  ebx, edi
	push ecx
	xor  ecx, ecx
	mov  cl, BYTE[edx]
	mov  BYTE[ebx], cl
	pop  ecx
	jmp  _loop
	
_done:
	pop  ebx
	mov  esp, ebp
	pop  ebp
	ret
section .data
	string:			  db '0x00000000',0
	lookup_hex_table: db '0123456789ABCDEF', 0
	num:			  dd 0x28B012F9
	
	bytes (assume lookup_hex_table is at physical_adress 0x0DCDB9F4) ~>
	{ 
		0x55, 0x89, 0xE5, 0x8B, 0x45, 0x08, 0x8B, 0x5D, 0x0C, 0xB9, 0x00, 0x00, 0x00, 0x00, 0xBE, 0xF4, 
		0xB9, 0xCD, 0x0D, 0x53, 0x83, 0xF9, 0x08, 0x74, 0x23, 0x31, 0xD2, 0xBB, 0x10, 0x00, 0x00, 0x00, 
		0xF7, 0xF3, 0x83, 0xC1, 0x01, 0x01, 0xF2, 0x5B, 0x53, 0xBF, 0x08, 0x00, 0x00, 0x00, 0x29, 0xCF, 
		0x01, 0xFB, 0x51, 0x31, 0xC9, 0x8A, 0x0A, 0x88, 0x0B, 0x59, 0xEB, 0xD8, 0x5B, 0x89, 0xEC, 0x5D, 
		0xC3 
	}